import codecademylib3_seaborn
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

# Load the passenger data
passengers = pd.read_csv("passengers.csv")
#print(passengers.head())

# Update sex column to numerical
passengers["Sex"] = passengers["Sex"].map({'female':'1', 'male':'0'})
#print(passengers.head())

# Fill the nan values in the age column
#print(passengers['Age'].values)
passengers.fillna(value = passengers.Age.mean(), inplace = True)
#print(passengers)

# Create a first class column
passengers['FirstClass'] = passengers['Pclass'].apply(lambda x: 1 if x == 1 else 0)
#print(passengers.head())

# Create a second class column
passengers['SecondClass'] = passengers['Pclass'].apply(lambda x: 1 if x == 2 else 0)
#print(passengers.head())

# Select the desired features
features = passengers[['Sex', 'Age', 'FirstClass', 'SecondClass']]
survival = passengers['Survived']
#print(features)
#print(survival)

# Perform train, test, split
training_features, test_features, training_labels, test_labels = train_test_split(features, survival, test_size = 0.7) 

# Scale the feature data so it has mean = 0 and standard deviation = 1
scaler = StandardScaler()
train_features = scaler.fit_transform(training_features)
test_features = scaler.transform(test_features)

# Create and train the model
model = LogisticRegression()
model.fit(train_features,  training_labels)

# Score the model on the train data
training_score = model.score(train_features,  training_labels)
print(training_score)

# Score the model on the test data
test_score = model.score(test_features,  test_labels)
print(test_score)

# Analyze the coefficients
coef = model.coef_.tolist()[0]
print(coef)

# Sample passenger features
Jack = np.array([0.0,20.0,0.0,0.0])
Rose = np.array([1.0,17.0,1.0,0.0])
You = np.array([1.0,23.0,1.0,0.0])

# Combine passenger arrays
sample_passengers = np.array([Jack, Rose, You])

# Scale the sample passenger features
sample_passengers = scaler.transform(sample_passengers)
#print(sample_passengers)

# Make survival predictions!
predictions = model.predict(sample_passengers)
print(predictions)
